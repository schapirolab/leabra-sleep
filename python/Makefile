# Makefile for gopy pkg generation of python bindings to emergent
# File is generated by gopy (will not be overwritten though)
# gopy exe -vm=python3 -exclude=driver,oswin -main="runtime.LockOSThread(); gimain.Main(func() {  GoPyMainRun() })" github.com/emer/leabra/leabra github.com/emer/leabra/deep github.com/emer/emergent github.com/emer/etable math/rand github.com/goki/gi github.com/goki/ki/ki

PYTHON=python3
PIP=$(PYTHON) -m pip

all: gen

install: install-pkg install-exe

# note: it is important that leabra come before deep otherwise deep captures all the common types
# unfortunately this means that all sub-packages need to be explicitly listed.
gen:
	gopy exe -name=leabra -vm=python3 -no-warn -exclude=driver,oswin -main="runtime.LockOSThread(); gimain.Main(func() {  GoPyMainRun() })" math/rand github.com/goki/ki/ki github.com/goki/mat32  github.com/goki/gi/units github.com/goki/gi/gi github.com/goki/gi/svg github.com/goki/gi/giv github.com/goki/gi/gi3d github.com/goki/gi/gimain github.com/emer/etable github.com/emer/emergent github.com/emer/leabra/chans github.com/emer/leabra/fffb github.com/emer/leabra/knadapt github.com/emer/leabra/nxx1 github.com/emer/leabra/leabra github.com/emer/leabra/spike github.com/emer/leabra/deep github.com/emer/leabra/hip github.com/emer/leabra/pbwm

build:
	$(MAKE) -C leabra build

install-pkg:
	# this does a local install of the package, building the sdist and then directly installing it
	# copy epygiv.py to leabra so it will be installed along with rest
	cp epygiv/epygiv.py leabra/
	rm -rf dist build */*.egg-info *.egg-info
	$(PYTHON) setup.py sdist
	$(PIP) install dist/*.tar.gz

install-exe:
	# install executable into /usr/local/bin
	cp leabra/pyleabra /usr/local/bin/

clean:
	rm -rf leabra dist build */*.egg-info *.egg-info
	
